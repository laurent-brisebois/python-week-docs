(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{326:function(t,e,a){"use strict";a.r(e);var s=a(33),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"bash-for-newbies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-for-newbies"}},[t._v("#")]),t._v(" Bash for Newbies")]),t._v(" "),a("h3",{attrs:{id:"part-one-yeah-but-why"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-one-yeah-but-why"}},[t._v("#")]),t._v(" Part one: yeah but why?")]),t._v(" "),a("p",[a("strong",[t._v("tldr;")]),t._v(" learn it.")]),t._v(" "),a("p",[a("strong",[t._v("The short:")]),t._v(" Almost all computers on this planet speak a common language: bash. It's easy. you only need the first 10 commands to be pretty good at it. If you learn the next 20 you're pretty much a beast of the command line.")]),t._v(" "),a("p",[a("strong",[t._v("The long:")]),t._v(" Mouse+clicks is the equivalent of going to a restaurant in a foreign country where you don't speak the language and telling the waiter your order by pointing at images on the menu; it works... but it's weak sauce. Speaking bash to your computer is like having learned the language perfectly and being able to ask the waiter exactly what you want, whether the pretty images are on the menu or not. Bash allows for much more granular, predictable, and reproducible conversations between you and your computer.")]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"part-two-3-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-two-3-concepts"}},[t._v("#")]),t._v(" Part two: 3 concepts")]),t._v(" "),a("ol",[a("li",[a("p",[t._v('The whole file architecture is one big tree that spawns from the root directory, "/". You are always somewhere on that tree. "/ -> Users -> Desktop -> mydog.png" would be written like this: /Users/Desktop/mydog.png. You\'re always inside a directory, and you move around the tree however you want; up, down, sideways. You can also jump to any specific location on the tree if you know its address.')])]),t._v(" "),a("li",[a("p",[t._v('Commands come with options, called flags ("ls -a" for example is the ls command with the a flag activated). Some flags will require more input from you, and those inputs will come directly after the flag. Some commands will also require arguments. For example when you create a file, you also need to give it a name: "touch newfile.txt". In this case we would say that newfile.txt was the first argument of the touch command.')])]),t._v(" "),a("li",[a("p",[t._v('Some files and directories are "hidden". Their names start with a "." and they will not show up with a simple list command; if you don\'t see what you\'re looking for, make sure you "list all" (ls -a). There is nothing special about hidden files or directories, you can access them like any other.')])])]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"part-three-10-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#part-three-10-commands"}},[t._v("#")]),t._v(" Part three: 10 commands")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# see what's up")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> print your current directory (location) to console")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> list the contents of the current directory")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -a                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> list but include hidden files")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# moving around")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/user/somedirectory "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> go to specific location (here the ~/user/somedirectory)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> go to root directory")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> go back one directory")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# god giveth, and god taketh")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" newfile.txt      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> create a new file (called newfile.txt in this case)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" newfile.txt        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> print contents of a file to console")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" newfile.txt         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> delete a file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" newdir           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> make a new directory (called newdir in this case)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# other stuff")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" ./coolscript.sh "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> run the coolscript.sh file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> clear your console")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> run the following command as admin (sudo)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arrows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> go back and forth in your command history")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git (I lied about the 10 commands... here is an 11th)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("https://repo.git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# >>> clone a git repository in your current directory")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);